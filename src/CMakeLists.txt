CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
PROJECT(HPNum LANGUAGES CXX)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
# External 3rd party libs that we include
#ADD_SUBDIRECTORY(libs/extlib EXCLUDE_FROM_ALL)

######## PARALLEL IMPLEMENTATION : Choose the right parallel library ! ############
SET(PARALLEL_IMPLEMENTATION "MPI" CACHE STRING "Implementation library used in the parallel library")
SET_PROPERTY(CACHE PARALLEL_IMPLEMENTATION PROPERTY STRINGS MPI PVM NONE)
IF (PARALLEL_IMPLEMENTATION STREQUAL "MPI")
  FIND_PACKAGE(MPI REQUIRED)
  INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
  SET (EXTRA_LIBS ${EXTRA_LIBS} ${MPI_LIBRARIES})
  ADD_DEFINITIONS( -DUSE_MPI=1 )
  IF (MPI_COMPILE_FLAGS)
    SET (EXTRA_COMPILE_FLAGS ${EXTRA_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
  ENDIF (MPI_COMPILE_FLAGS)
  IF (MPI_LINK_FLAGS)
    SET (EXTRA_LINK_FLAGS ${EXTRA_LINK_FLAGS} ${MPI_LINK_FLAGS})
  ENDIF (MPI_LINK_FLAGS)
ENDIF (PARALLEL_IMPLEMENTATION STREQUAL "MPI")

IF (PARALLEL_IMPLEMENTATION STREQUAL "PVM")
#  FIND_PACKAGE(PVM REQUIRED)
  INCLUDE_DIRECTORIES(${PVM_INCLUDE_PATH})
  SET (EXTRA_LIBS ${EXTRA_LIBS} ${PVM_LIBRARIES})
  ADD_DEFINITIONS( -DUSE_PVM=1 )
  IF (PVM_COMPILE_FLAGS)
    SET (EXTRA_COMPILE_FLAGS ${EXTRA_COMPILE_FLAGS} ${PVM_COMPILE_FLAGS})
  ENDIF (PVM_COMPILE_FLAGS)
  IF (PVM_LINK_FLAGS)
    SET (EXTRA_LINK_FLAGS ${EXTRA_LINK_FLAGS} ${PVM_LINK_FLAGS})
  ENDIF (PVM_LINK_FLAGS)
ENDIF (PARALLEL_IMPLEMENTATION STREQUAL "PVM")

IF (PARALLEL_IMPLEMENTATION STREQUAL "NONE")
  ADD_DEFINITIONS( -DUSE_STUB=1 )
ENDIF (PARALLEL_IMPLEMENTATION STREQUAL "NONE")
####################################################################################
# add a target to generate API documentation with Doxygen
FIND_PACKAGE(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
endif(DOXYGEN_FOUND)
####################################################################################
find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
####################################################################################
# Find OPENGL and GLUT implementation
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLUT REQUIRED)
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIRS})
SET (EXTRA_LIBS ${EXTRA_LIBS} ${OPENGL_LIBRARIES} ${GLUT_LIBRARY})
####################################################################################

ENABLE_TESTING()
ADD_SUBDIRECTORY(libcore)
ADD_SUBDIRECTORY(libparallel)
ADD_SUBDIRECTORY(libgeometry)
ADD_SUBDIRECTORY(liblinearalgebra)
ADD_SUBDIRECTORY(libgui)
ADD_SUBDIRECTORY(projets)
